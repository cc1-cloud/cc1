#!/usr/bin/python
# -*- coding: utf-8 -*-
# @cond LICENSE
#
# Copyright [2010-2013] Institute of Nuclear Physics PAN, Krakow, Poland
#
# Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#
# @endcond LICENSE

"""
@author Maciej Nabozny <mn@mnabozny.pl>
"""

import subprocess
import sys
import os
import pwd, grp


try:
    sys.path.append('/usr/lib/cc1/')
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "cm.settings")

    from cm.models.vm import VM
    from common.states import vnc_states
except:
    print "ERROR: Cannot import CM database model. Probably unconfigured!"
    sys.exit(1)


def start():
    stop()
    print "CM: Preparing CM to redirect vnc..."
    dev_null = open('/dev/null', 'w')
    subprocess.call('echo 1 > /proc/sys/net/ipv4/ip_forward', shell=True)

    # Remove old rules, if exists
    subprocess.call('/sbin/iptables -t nat -D POSTROUTING -j CC1_VNC_MASQUERADE', shell=True, stdout=dev_null, stderr=dev_null)
    subprocess.call('/sbin/iptables -t nat -D PREROUTING -j CC1_VNC_REDIRECT', shell=True, stdout=dev_null, stderr=dev_null)

    # Add new rules
    subprocess.call('/sbin/iptables -t nat -N CC1_VNC_MASQUERADE', shell=True)
    subprocess.call('/sbin/iptables -t nat -N CC1_VNC_REDIRECT', shell=True)

    subprocess.call('/sbin/iptables -t nat -A POSTROUTING -j CC1_VNC_MASQUERADE', shell=True)
    subprocess.call('/sbin/iptables -t nat -A PREROUTING -j CC1_VNC_REDIRECT', shell=True)

    dev_null.close()

    print "CM: Reattaching all vnc redirections..."
    uid_cc1 = pwd.getpwnam('cc1').pw_uid
    gid_cc1 = grp.getgrnam('cc1').gr_gid
    gid_kvm = grp.getgrnam('kvm').gr_gid
    gid_libvirt = grp.getgrnam('libvirt').gr_gid

    if os.getuid() == 0:
        os.environ['HOME'] = '/var/lib/cc1/'

        os.setgroups([gid_cc1, gid_kvm, gid_libvirt])
        os.setregid(gid_cc1, gid_cc1)
        os.setreuid(uid_cc1, uid_cc1)
    elif os.getuid() != uid_cc1:
        print "ERROR: Cannot change user"
        sys.exit(1)

    for vm in VM.objects.filter(vnc_enabled=vnc_states['attached']).all():
        try:
            vm.attach_vnc(reattach=True)
            vm.save()
            print "CM: Vnc for vm %d is attached" % vm.id
        except Exception, e:
            pass


def stop():
    print "CM: Removing all vnc redirections..."
    dev_null = open('/dev/null', 'w')
    # Remove old rules
    subprocess.call('/sbin/iptables -t nat -D POSTROUTING -j CC1_VNC_MASQUERADE', shell=True, stdout=dev_null, stderr=dev_null)
    subprocess.call('/sbin/iptables -t nat -D PREROUTING -j CC1_VNC_REDIRECT', shell=True, stdout=dev_null, stderr=dev_null)

    # Clean old vnc chains
    subprocess.call('/sbin/iptables -t nat -F CC1_VNC_MASQUERADE', shell=True, stdout=dev_null, stderr=dev_null)
    subprocess.call('/sbin/iptables -t nat -F CC1_VNC_REDIRECT', shell=True, stdout=dev_null, stderr=dev_null)
    subprocess.call('/sbin/iptables -t nat -X CC1_VNC_MASQUERADE', shell=True, stdout=dev_null, stderr=dev_null)
    subprocess.call('/sbin/iptables -t nat -X CC1_VNC_REDIRECT', shell=True, stdout=dev_null, stderr=dev_null)

    dev_null.close()


if __name__ == "__main__":
    if os.getuid() != 0:
        print "Run this tool as root user!"
        sys.exit(1)

    if len(sys.argv) == 2 and sys.argv[1] == "start":
        sys.exit(start())
    elif len(sys.argv) == 2 and sys.argv[1] == "stop":
        sys.exit(stop())
    else:
        print "Usage: %s [mount|umount]" % sys.argv[0]
        sys.exit(1)
