#!/usr/bin/python
# -*- coding: utf-8 -*-
# @cond LICENSE
#
# Copyright [2010-2013] Institute of Nuclear Physics PAN, Krakow, Poland
#
# Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#
# @endcond LICENSE

"""
@author Maciej Nabozny <mn@mnabozny.pl>
"""

import subprocess
import urllib2
import sys
import os
import pwd, grp


def install(lv_conn_string):
    url = urllib2.urlparse.urlsplit(lv_conn_string)
    node_address = url.hostname

    if url.username != 'cc1':
        print "ERROR: Username is not cc1!"
        return 1

    # Prepare command for node (add repository, package with tools and configure sudo commands
    print "Pre-configuring node..."
    public_key = open('/var/lib/cc1/.ssh/id_rsa.pub').read()
    script = '''
    if [ -e /etc/apt/sources.list ] ; then
        echo 'deb http://cc1.ifj.edu.pl/packages/ wheezy main #CC1' >> /etc/apt/sources.list
        apt-get update
        apt-get --yes --force-yes install cc1-node cc1-common cc1-common-networking
    fi
    #TODO: Redhat version

    echo "NODE: Creating cc1 user"
    python /usr/sbin/cc1_setup_user create

    echo "NODE: Configuring node"
    python /usr/sbin/cc1_node_configure configure "%(public_key)s"
    ''' % {'public_key': public_key}
    
    r = subprocess.call(['ssh', 'root@%s' % node_address, script])
    
    
    if r != 0:
        print "ERROR: Node pre-configuration error"
        return 1
    else:
        return 0


def configure(lv_conn_string, interfaces):
    try:
        url = urllib2.urlparse.urlsplit(lv_conn_string)
        node_address = url.hostname
    except:
        print "Invalid libvirt url"

    if url.username != 'cc1':
        print "ERROR: Username is not cc1!"
        return 1

    try:
        sys.path.append('/etc/cc1/cm/')
        import config
    except:
        print "ERROR: First, configure CM! Execute command: cc1_cm_setup_config"
        return 1
        
    cm_ip = 'echo $SSH_CLIENT | cut -d " " -f 1'
    r = subprocess.call(['ssh', '-i', '/var/lib/cc1/.ssh/id_rsa', url.netloc, 'sudo /usr/sbin/cc1_network_setup configure http://`%s`:8003/ %s %s' % (cm_ip, interfaces, config.OSPF_TOKEN)])
    if r != 0:
        print "ERROR: Cannot configure networking on node"
        return 1

    r = subprocess.call(['ssh', '-i', '/var/lib/cc1/.ssh/id_rsa', url.netloc, 'sudo /usr/sbin/cc1_node_setup_libvirt configure %s' % lv_conn_string])
    if r != 0:
        print "ERROR: Cannot configure libvirt"
        return 1

    #r = subprocess.call(['ssh', '-i', '/var/lib/cc1/.ssh/id_rsa', url.netloc, 'sudo /usr/sbin/cc1_node_storage mount_images_pool'])


def add(lv_conn_string, cpu_total, memory_total, hdd_total):
    try:
        url = urllib2.urlparse.urlsplit(lv_conn_string)
    except:
        print "ERROR: Invalid libvirt url"
        return 1

    if url.username != 'cc1':
        print "ERROR: Username is not cc1!"
        return 1

    try:
        sys.path.append('/usr/lib/cc1/')
        os.environ.setdefault("DJANGO_SETTINGS_MODULE", "cm.settings")

        from cm.models.node import Node
        from common.states import node_states
    except:
        print "ERROR Cannot import CM database model. Probably CM is unconfigured!"
        return 1

    try:
        Node.objects.get(address = url.hostname)
        print "ERROR: Node exists in database!"
        return 1
    except:
        print "INFO: Adding node to database..."


    node = Node()
    node.address = url.hostname
    node.comment = ''
    node.driver = url.scheme.split('+')[0]
    node.transport = url.scheme.split('+')[1]
    node.username = url.username
    node.suffix = url.path
    node.cpu_total = cpu_total
    node.memory_total = memory_total
    node.hdd_total = hdd_total
    node.state = node_states['offline']
    node.save()

    print "INFO: Restarting node services..."

    subprocess.call(['ssh', '-i', '/var/lib/cc1/.ssh/id_rsa', url.netloc, 'sudo /usr/sbin/cc1_node_storage mount'])
    subprocess.call(['ssh', '-i', '/var/lib/cc1/.ssh/id_rsa', url.netloc, 'sudo /usr/sbin/cc1_node_public_ip start'])

    print "INFO: Starting node-self-check..."
    subprocess.call(['ssh', '-i', '/var/lib/cc1/.ssh/id_rsa', url.netloc, 'sudo /etc/init.d/cc1-node restart'])

    print "INFO: Done."
    return 0

def remove():
    print "Not implemented!"
    return 0


def purge():
    print "Not implemented!"
    return 0


if __name__ == "__main__":
    uid_cc1 = pwd.getpwnam('cc1').pw_uid
    gid_cc1 = grp.getgrnam('cc1').gr_gid
    gid_kvm = grp.getgrnam('kvm').gr_gid
    gid_libvirt = grp.getgrnam('libvirt').gr_gid

    if os.getuid() == 0:
        os.environ['HOME'] = '/var/lib/cc1/'

        os.setgroups([gid_cc1, gid_kvm, gid_libvirt])
        os.setregid(gid_cc1, gid_cc1)
        os.setreuid(uid_cc1, uid_cc1)
    elif os.getuid() != uid_cc1:
        print "Run this tool as cc1 or root user!"
        sys.exit(1)

    if len(sys.argv) == 3 and sys.argv[1] == 'install':
        sys.exit(install(sys.argv[2]))
    elif len(sys.argv) == 4 and sys.argv[1] == 'configure':
        sys.exit(configure(sys.argv[2],
                           sys.argv[3]))
    elif len(sys.argv) == 6 and sys.argv[1] == 'add':
        sys.exit(add(sys.argv[2],
                     sys.argv[3],
                     sys.argv[4],
                     sys.argv[5]))
    elif len(sys.argv) == 2 and sys.argv[1] == 'remove':
        sys.exit(remove())
    elif len(sys.argv) == 2 and sys.argv[1] == 'purge':
        sys.exit(purge())
    else:
        print "Usage: %s [install] libvirt_connection_string" % sys.argv[0]
        print "           - installs node packages"
        print ""
        print "       %s [configure] libvirt_connection_string interface1,interface2" % sys.argv[0]
        print "           - configures all daemons and services on node"
        print ""
        print "       %s [add] libvirt_connection_string cpu_total memory_total hdd_total" % sys.argv[0]
        print "           - check node and add it to database"
        print ""
        print "       %s [remove|purge]" % sys.argv[0]
        print "       Where parameters are:"
        print "       - libvirt_connection_string is full ulr. E.g.:"
        print "         qemu+ssh://cc1@node_hostname/system"
        print "         Important: this should include cc1 username"
        print "       - interface1,interface2 - comma separated list of interfaces,"
        print "         which are used to communitate between vms and inside cluster"
        print "       Add action adds this node to database"
        sys.exit(1)

