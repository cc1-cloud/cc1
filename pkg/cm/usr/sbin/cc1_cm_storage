#!/usr/bin/python
# -*- coding: utf-8 -*-
# @cond LICENSE
#
# Copyright [2010-2013] Institute of Nuclear Physics PAN, Krakow, Poland
#
# Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#
# @endcond LICENSE

"""
@author Maciej Nabozny <mn@mnabozny.pl>
"""

import libvirt
import sys
import os
import pwd, grp


try:
    sys.path.append('/usr/lib/cc1/')
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "cm.settings")

    from cm.models.storage import Storage
    from common.states import storage_states
except:
    print "Cannot import CM database model. Probably unconfigured!"
    sys.exit(1)


def mount():
    conn = libvirt.open('qemu:///system')

    # Get local libvirt storages
    lv_storages = []
    for storage_name in conn.listStoragePools():
        lv_storages.append(conn.storagePoolLookupByName(storage_name))

    # Get storage list from cm
    cm_storages = [storage.name for storage in Storage.objects.filter(state = storage_states['ok'])]

    # Cleanup old storages and remount if necessary
    for lv_storage in lv_storages:
        # Stop and undefine storages, which are not listed in CM or not running
        if lv_storage.name() in cm_storages and lv_storage.info()[0] != libvirt.VIR_STORAGE_POOL_RUNNING:
            try:
                lv_storage.destroy()
                print "SUCCESS: Storage %s destroyed" % lv_storage.name()
            except Exception, e:
                print "ERROR: Cannot destroy storage %s: %s" % (lv_storage.name(), str(e))

            try:
                lv_storage.undefine()
                print "SUCCESS: Storage %s undefined" % lv_storage.name()
            except Exception, e:
                print "ERROR: Cannot undefine storage %s"
        elif lv_storage.name() not in cm_storages and lv_storage.name() != 'images':
            print "WARNING: Storage %s not exists in ClusterManager!" % lv_storage.name()

        # Start if not running (and undefine was failed)
        try:
            if lv_storage.info()[0] != libvirt.VIR_STORAGE_POOL_RUNNING:
                try:
                    lv_storage.build(0)
                except:
                    print "WARNING: Cannot build storage"

                lv_storage.create(0)
        except Exception, e:
            print "ERROR: Cannot start storage pool %s: %s" % (lv_storage.name(), str(e))

    # Mount new storages
    for storage in cm_storages:
        s = Storage.objects.get(name=storage)
        if storage in conn.listStoragePools() and conn.storagePoolLookupByName(storage).info()[0] == libvirt.VIR_STORAGE_POOL_RUNNING:
            print "INFO: Storage %s is running" % storage
            continue

        try:
            conn.storagePoolDefineXML(s.libvirt_template(), 0)
        except Exception, e:
            print "WARNING: Storage already defined"

        try:
            pool = conn.storagePoolLookupByName(s.name)
        except Exception, e:
            print "ERROR: Cannot find defined storage: %s" % str(e)
            s.state = storage_states['locked']
            s.save()
            continue

        try:
            pool.build(0)
            pool.create(0)
        except Exception, e:
            print "ERROR: Cannot create storage pool: %s" % str(e)
            s.state = storage_states['locked']
            s.save()

    conn.close()
    return 0


def umount():
    conn = libvirt.open('qemu:///system')

    # Get local libvirt storages
    lv_storages = []
    for storage_name in conn.listStoragePools():
        lv_storages.append(conn.storagePoolLookupByName(storage_name))

    # Get storage list from cm
    cm_storages = [storage.name for storage in Storage.objects.filter(state = storage_states['ok'])]

    for lv_storage in lv_storages:
        # Stop and undefine storages, which are not listed in CM or not running
        if lv_storage.name() in cm_storages:
            try:
                lv_storage.destroy()
                print "SUCCESS: Storage %s destroyed" % lv_storage.name()
            except Exception, e:
                print "ERROR: Cannot destroy storage %s: %s" % (lv_storage.name(), str(e))

            try:
                lv_storage.undefine()
                print "SUCCESS: Storage %s undefined" % lv_storage.name()
            except Exception, e:
                print "ERROR: Cannot undefine storage %s"
        elif lv_storage.name() not in cm_storages and lv_storage.name() != 'images':
            print "WARNING: Storage %s not exists in ClusterManager!" % lv_storage.name()

    conn.close()
    return 0


if __name__ == "__main__":
    uid_cc1 = pwd.getpwnam('cc1').pw_uid
    gid_cc1 = grp.getgrnam('cc1').gr_gid
    gid_kvm = grp.getgrnam('kvm').gr_gid
    gid_libvirt = grp.getgrnam('libvirt').gr_gid

    if os.getuid() == 0:
        os.environ['HOME'] = '/var/lib/cc1/'

        os.setgroups([gid_cc1, gid_kvm, gid_libvirt])
        os.setregid(gid_cc1, gid_cc1)
        os.setreuid(uid_cc1, uid_cc1)
    elif os.getuid() != uid_cc1:
        print "Run this tool as cc1 or root user!"
        sys.exit(1)

    if len(sys.argv) == 2 and sys.argv[1] == "mount":
        sys.exit(mount())
    elif len(sys.argv) == 2 and sys.argv[1] == "umount":
        sys.exit(umount())
    else:
        print "Usage: %s [mount|umount]" % sys.argv[0]
        sys.exit(1)
