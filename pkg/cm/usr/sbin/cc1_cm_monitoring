#!/usr/bin/python
# -*- coding: utf-8 -*-
# @cond LICENSE
#
# Copyright [2010-2013] Institute of Nuclear Physics PAN, Krakow, Poland
#
# Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#
# @endcond LICENSE

import traceback
import os
import sys
import time
import pwd
import grp

sys.path.append('/usr/lib/cc1/')
from common import utils


try:
    sys.path.append('/usr/lib/cc1/')
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "cm.settings")

    from cm.utils.threads.monia import start_monia
    from cm.utils.threads.daemon import Daemon

except Exception, e:
    print str(e)
    traceback.print_exc()
    print "Cannot import CM Monitoring thread. Probably unconfigured!"
    sys.exit(1)


class MonitorDaemon(Daemon):
        def run(self):
            while True:
                start_monia()
                time.sleep(180)

monitor = MonitorDaemon('/tmp/cc1-monitor.pid')

if __name__ == "__main__":
    uid_cc1 = pwd.getpwnam('cc1').pw_uid
    gid_cc1 = grp.getgrnam('cc1').gr_gid
    gid_kvm = grp.getgrnam('kvm').gr_gid
    gid_libvirt = utils.get_gid('libvirt') or utils.get_gid('libvirtd')

    if os.getuid() == 0:
        os.environ['HOME'] = '/var/lib/cc1/'

        os.setgroups([gid_cc1, gid_kvm, gid_libvirt])
        os.setregid(gid_cc1, gid_cc1)
        os.setreuid(uid_cc1, uid_cc1)
    elif os.getuid() != uid_cc1:
        print "Run this tool as cc1 or root user!"
        sys.exit(1)

    if len(sys.argv) == 2 and sys.argv[1] == "start":
        monitor.start()
    elif len(sys.argv) == 2 and sys.argv[1] == "stop":
        monitor.stop()
    else:
        print "Usage: %s start|stop" % sys.argv[0]
        sys.exit(1)