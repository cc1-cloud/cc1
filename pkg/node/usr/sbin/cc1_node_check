#!/usr/bin/python
# -*- coding: utf-8 -*-
# @cond LICENSE
#
# Copyright [2010-2013] Institute of Nuclear Physics PAN, Krakow, Poland
#
# Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#
# @endcond LICENSE

"""
@author Maciej Nabozny <mn@mnabozny.pl>
"""

import sys
import pwd
import grp
import imp


sys.path.append('/usr/lib/cc1/')
from common import utils
from common.states import node_states
from node.tools.check import *

storage_utils = imp.load_source('storage_utils', '/usr/sbin/cc1_node_storage')

try:
    network_config = imp.load_source('network_config', '/etc/cc1/common-networking/config.py')
    node_config = imp.load_source('node_config', '/etc/cc1/node/config.py')

    lv_address = node_config.lv_conn_string
    cm_address = network_config.cm_cluster_address
except:
    print "ERROR: First, configure this node from CM (command cc1_cm_setup_node)"
    sys.exit(1)

cm = utils.ServerProxy(cm_address)


if __name__ == "__main__":
    uid_cc1 = pwd.getpwnam('cc1').pw_uid
    gid_cc1 = grp.getgrnam('cc1').gr_gid
    gid_kvm = grp.getgrnam('kvm').gr_gid
    gid_libvirt = utils.get_gid('libvirt') or utils.get_gid('libvirtd')

    if os.getuid() == 0:
        os.environ['HOME'] = '/var/lib/cc1/'

        os.setgroups([gid_cc1, gid_kvm, gid_libvirt])
        os.setregid(gid_cc1, gid_cc1)
        os.setreuid(uid_cc1, uid_cc1)
    elif os.getuid() != uid_cc1:
        print "Run this tool as cc1 or root user!"
        sys.exit(1)

    try:
        check_cc_user()
        check_permissions()
        check_cm_connection()
        check_storage()
        check_qemu_conf()
        check_libvirt_conf()
        check_hooks()
        check_remote_storages()
        check_public_ip()

        print "Node is ok. Unlocking"
        cm.send_request('ci/node/update_state/', state=node_states['ok'])
        sys.exit(0)
    except Exception, e:
        print "Error occured: %s" % str(e)
        cm.send_request('ci/node/update_state/', state=node_states['offline'], error="Self-check failed: %s" % str(e))
        sys.exit(1)